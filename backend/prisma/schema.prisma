// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique @db.VarChar(255)
  passwordHash  String   @map("password_hash") @db.VarChar(255)
  username      String   @unique @db.VarChar(50)
  displayName   String?  @map("display_name") @db.VarChar(100)
  bio           String?
  avatarUrl     String?  @map("avatar_url")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  posts              Post[]
  comments           Comment[]
  likes              Like[]
  followers          Follow[]       @relation("UserFollowers")
  following          Follow[]       @relation("UserFollowing")
  notifications      Notification[] @relation("UserNotifications")
  triggeredNotifications Notification[] @relation("RelatedUser")

  @@map("users")
}

model Post {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  content   String
  mediaUrls String[] @map("media_urls")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]

  @@map("posts")
  @@index([userId])
  @@index([createdAt(sort: Desc)])
}

model Follow {
  id          String   @id @default(uuid()) @db.Uuid
  followerId  String   @map("follower_id") @db.Uuid
  followingId String   @map("following_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  postId    String   @map("post_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  postId    String   @map("post_id") @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
  @@index([postId])
  @@index([userId])
}

model Notification {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  type          String   @db.VarChar(50) // 'new_post', 'like', 'comment', 'follow'
  relatedUserId String?  @map("related_user_id") @db.Uuid
  relatedPostId String?  @map("related_post_id") @db.Uuid
  read          Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Relations
  user        User  @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  relatedUser User? @relation("RelatedUser", fields: [relatedUserId], references: [id], onDelete: Cascade)
  relatedPost Post? @relation(fields: [relatedPostId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId])
  @@index([userId, read])
}
