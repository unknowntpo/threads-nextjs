services:
  postgres:
    image: postgres:16-alpine
    container_name: threads_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: threads
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.0
    container_name: threads_keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: 'true'
    ports:
      - '8080:8080'
    command: start-dev
    healthcheck:
      test: ['CMD-SHELL', 'timeout 1 bash -c "</dev/tcp/localhost/8080" || exit 1']
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 90s

  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: threads_ml_service
    restart: unless-stopped
    ports:
      - '8001:8000'
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/threads
      PYTHONUNBUFFERED: '1'
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'python -c "import socket; socket.create_connection((''localhost'', 8000), timeout=2)" || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./ml-service:/app
    networks:
      - default

  ollama:
    image: ollama/ollama:latest
    container_name: threads_ollama
    restart: unless-stopped
    ports:
      - '11434:11434'
    volumes:
      - ollama_data:/root/.ollama
    healthcheck:
      test: ['CMD', 'ollama', 'list']
      interval: 30s
      timeout: 10s
      retries: 3
    # Auto-pull Gemma model on startup
    entrypoint: >
      sh -c "
        ollama serve &
        OLLAMA_PID=$$!
        sleep 5
        ollama pull gemma3:270m
        wait $$OLLAMA_PID
      "
    networks:
      - default

  dagster_webserver:
    build:
      context: ./ml-service
      dockerfile: Dockerfile.dagster
    container_name: threads_dagster_webserver
    restart: unless-stopped
    ports:
      - '3001:3001'
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/threads
      OLLAMA_BASE_URL: http://ollama:11434
      DAGSTER_HOME: /app/dagster_home
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - dagster_data:/app/dagster_home
    entrypoint:
      - uv
      - run
      - dagster-webserver
      - -h
      - 0.0.0.0
      - -p
      - '3001'
      - -w
      - /app/workspace.yaml
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/server_info']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default

  dagster_daemon:
    build:
      context: ./ml-service
      dockerfile: Dockerfile.dagster
    container_name: threads_dagster_daemon
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/threads
      OLLAMA_BASE_URL: http://ollama:11434
      DAGSTER_HOME: /app/dagster_home
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
    volumes:
      - dagster_data:/app/dagster_home
    entrypoint:
      - uv
      - run
      - dagster-daemon
      - run
    networks:
      - default

volumes:
  postgres_data:
  ollama_data:
  dagster_data:
